#summary Introduzione e Premesse a Blite SE

= Introduzione =

*B*_lite_ *SE* e' un progetto finalizzato all'implementazione del linguaggio [http://rap.dsi.unifi.it/cows/papers/blite.pdf Blite] all'interno di [https://fuji.dev.java.net/ Fuji] come JBI service engine.

*B*_lite_ e' un linguaggio ideato e formalizzato presso il Dipartimento di Sistemi Informatici ([http://www.dsi.unifi.it Dsi]) dell'Università degli Studi di Firenze ([http://www.unifi.it Unifi]) con l'intento di fornire un semantica formale a WS-BPEL e un strumento di supporto per l'analisi formale (validazione e verifica) delle applicazioni service based. Una presentazione dettagliata del linguaggio e' fornita dall'articolo [http://rap.dsi.unifi.it/cows/papers/blite.pdf "A formal account of WS-BPEL"].

= Dettagli =

L'obiettivo di questo progetto e' quello di realizzare un'implementazione di *B*_lite_ tramite un componente JBI e quindi fornirne un'implementazione usufruibile su ogni piattaforma JBI compatibile ([https://open-esb.dev.java.net/ OpenESB], [http://servicemix.apache.org/home.html Apache ServiceMix] ...)

JBI infatti e' una specifica JCP ([http://jcp.org/aboutJava/communityprocess/final/jsr208/index.html JSR-208]) il cui acronimo sta per Java Business Integration, e definisce un'architettura standard capace d'integrare componenti eterogenei secondo il modello SOA e SOC.

Le specifiche JBI pur limitandosi alla tecnologia Java si basano sui principali standard open patrocinati da [http://www.w3.org/ W3C] e [http://www.oasis-open.org/home/index.php Oasis].
JBI specifica lo sviluppo di container di servizi secondo un modello a plugin. L'architettura e' costituita da un contenitore/framework (l'environment JBI) in grado di ospitare sottocontainer di servizi (i Componets), si parla anche di "container of containers". I Componets verso l'eviroments e i Servizi (in JBI idetificati con il termine Service Units SU) verso i Componets sono specificati tramite il Web Services Description Language 2.0 ([WSDL2.0]) che permette di definire le interfacce e i tipi di dati scambiati in maniera sufficientemente astratta e portabile tramite XML e XSD. 

All'interno del framework possono essere resi disponibili due categorie di Componets, i Binding Components (BC) e i Service Engine (SE). I BC sono componenti che realizzano un particolare binding su una reale tecnologia/protocollo di interazione, permettendo cosi' la comunicazione del sistema JBI con l'esterno e rendendo di fatto disponibili le reali implementazioni dei servizi che posso basarsi sulle piu' svariate tecnologie e risiedere sulle piu' eterogenie piattaforme. Esistono innumerevoli BC che implementano dal piu' attuale SAOP/HTTP all'ormai legacy IBM CiCs passando per Corba, EJB, DCOM e molti altri ancora. Diversamente i SE (Service Engines) sono Componts con funzionalità di elaborazione, di fatto un SE implementa un qualche linguaggio di programmazione con la possibilita' di dialogare con i tutti i Servce Units (i Servizi) che tramite i vari BC sono disponibili all'interno del JBI environment. Di fatti un SE e' un conteiner che permette agli sviluppatori di installare la propria business logic in un determinato formalismo e di poter usufruire di una praticamente sterminata palette di componenti riusabili. Esistono diversi SE, dal BPEL SE a JavaEE SE, dal XSLT SE al Ruby SE e molti altri ancora fra cui presto anche il *B*_lite_-SE.  

In definitiva il modello di sviluppo di JBI e' quello della “Composite Application”, in cui lo sviluppatore e' in grado di sviluppare un'applicazione "assemblando" le funzionalità necessarie  dagli opportuni Componenti che posso quindi anche essere del tutto eterogenei sia dal punto di vista   tecnologico che del formalismo (“System Integration”).

In particolare la nostra implementazione pur essendo pienamente JBI compatibile fara' riferimento al progetto open source [https://fuji.dev.java.net/ Fuji] e di questo cerchera' pienamente di abbracciarne l'approccio e la filosofia. Fuji non e' altro che l'ultima implementazione di un conteiner JBI secondo quelle che sono le ultime tendenze dello sviluppo software. La volonta' e' quella di creare sistemi il piu' possibile light, aperti, integrabili, non piu' basati su sistemi monolitici come erano gli Application Server in cui le dipendenze dei le varie parti risultano spesso poco chiare e tutto alla fine risulta dipendere da tutto. La tendenza e' quella invece di creare implementazioni capaci di girare anche autonomamente e eventualmente di integrarsi in maniera dinamica con le altre parti riducendo al massimo le dipendenze statiche e qualora tali dipendenze siano imprescindibili allora la volonta' e' quella renderle esplicite e ben formalizzate tenendo conto dei problemi di versionamento e di possibili fallimenti della dipendenza stessa. In tal senso il riferimento sono le specifiche [http://www.osgi.org/Main/HomePage OSGi].

Per chiarire il concetto riportiamo alcune affermazioni direttamente riprese dal sito di Fuji

_“Project Fuji forms the core component of Open ESB v3 effort and represents Sun's next generation open source integration runtime, focused on providing a lightweight, developer-friendly, and extensible platform for composite application development. At the core of Project Fuji is a lightweight micro-kernel based on JBI (JSR 208) and OSGi. Packaged as an OSGi bundle, the micro-kernel can be installed in any OSGi-compliant runtime. JSR 208 support allows all of your existing JBI components to run in Fuji and also introduces a robust, message-based service bus to the OSGi environment. Developer experience is a primary focal point in Fuji as evidenced by the level of flexibility and accessibility offered in the platform. Starting with a rapid, top-down development language, IFL (Integration Flow Language), developers can quickly and easily generate an integration application using a domain-specific grammar. The service development model favors convention and configuration over boilerplate code and framework APIs, allowing integration developers to focus on the code that matters”._