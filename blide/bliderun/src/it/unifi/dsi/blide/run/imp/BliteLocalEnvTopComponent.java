/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package it.unifi.dsi.blide.run.imp;

import it.unifi.dsi.blide.lang.BliteDataObject;
import it.unifi.dsi.blide.lang.BliteDefModelProvider;
import it.unifi.dsi.blide.lang.BliteEnvProviderService;
import it.unifi.dsi.blide.lang.BliteIncompatibleUnitException;
import it.unifi.dsi.blitese.localenv.IncompatibleCompUnitException;
import it.unifi.dsi.blitese.localenv.LocalEnvironment;
import it.unifi.dsi.blitese.parser.BLTDEFCompilationUnit;
import java.io.Serializable;
import java.net.URL;
import java.util.logging.Logger;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.filesystems.FileStateInvalidException;
import org.openide.util.Exceptions;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
final class BliteLocalEnvTopComponent extends TopComponent implements ExplorerManager.Provider {

    // -- The Blite Local Enviroment Instance
    private static final LocalEnvironment localEnviroment = new LocalEnvironment();
    // -------------------------------------------------------------------------

    // -- The Explore Manager instance
    private static final ExplorerManager mamager = new ExplorerManager();

    // -- The Singleton Instance
    private static BliteLocalEnvTopComponent instance;

    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "it/unifi/dsi/blide/run/imp/servers.png";

    private static final String PREFERRED_ID = "BliteLocalEnvTopComponent";

    private BliteLocalEnvTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(BliteLocalEnvTopComponent.class, "CTL_BliteLocalEnvTopComponent"));
        setToolTipText(NbBundle.getMessage(BliteLocalEnvTopComponent.class, "HINT_BliteLocalEnvTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

        associateLookup(ExplorerUtils.createLookup(mamager, getActionMap()));
        mamager.setRootContext(new EnvNode(localEnviroment));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new BeanTreeView();

        setLayout(new java.awt.BorderLayout());
        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized BliteLocalEnvTopComponent getDefault() {
        if (instance == null) {
            instance = new BliteLocalEnvTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the BliteLocalEnvTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized BliteLocalEnvTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(BliteLocalEnvTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof BliteLocalEnvTopComponent) {
            return (BliteLocalEnvTopComponent) win;
        }
        Logger.getLogger(BliteLocalEnvTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    public ExplorerManager getExplorerManager() {
        return mamager;
    }

    public LocalEnvironment getEnvironment() {
        return localEnviroment;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return BliteLocalEnvTopComponent.getDefault();
        }
    }
}
